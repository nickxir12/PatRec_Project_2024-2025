{
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3",
      "language": "python"
    },
    "language_info": {
      "name": "python",
      "version": "3.10.12",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "kaggle": {
      "accelerator": "gpu",
      "dataSources": [
        {
          "sourceId": 10611406,
          "sourceType": "datasetVersion",
          "datasetId": 6569340
        }
      ],
      "dockerImageVersionId": 30840,
      "isInternetEnabled": true,
      "language": "python",
      "sourceType": "notebook",
      "isGpuEnabled": true
    },
    "colab": {
      "gpuType": "T4",
      "provenance": [],
      "name": "MSE_reproduction",
      "include_colab_link": true
    },
    "accelerator": "GPU",
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {}
    }
  },
  "nbformat_minor": 0,
  "nbformat": 4,
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/nickxir12/PatRec_Project_2024-2025/blob/main/MNIST_code/MSE_reproduction\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "source": [
        "# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES,\n",
        "# THEN FEEL FREE TO DELETE THIS CELL.\n",
        "# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON\n",
        "# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR\n",
        "# NOTEBOOK.\n",
        "import kagglehub\n",
        "konstantinosbarkas_mnist_dataset_processed_from_local_path = kagglehub.dataset_download('konstantinosbarkas/mnist-dataset-processed-from-local')\n",
        "\n",
        "print('Data source import complete.')\n"
      ],
      "metadata": {
        "id": "8AiykHRg_T8o"
      },
      "cell_type": "code",
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Idea 4: Samples fitering - online\n",
        "\n",
        "## Περιγραφή του αλγορίθμου\n",
        "- Γίνεται εκπαίδευση με grokfast - EMA. Όταν **appl_sampl_filter** is False έχω μόνο αυτό, ενώ για True εφαρμόζω επιπλέον και την ιδέα 4 για πιο έξυπνη επιλογή δειγμάτων.\n",
        "- Ο Dataloader έχει έναν custom sampler (WeightedRandomSampler) ο οποίος κάθε φορά διαλέγει ένα δείγμα με βάση κάποιο βάρος/πιθανότητα.\n",
        "- Στην αρχή τα βάρη είναι όλα ίδια (ομοιόμορφη κατανομή) οπότε ο Dataloader λειτουργεί όπως συνήθως διαλέγοντας τυχαία ένα sample.\n",
        "- Σε κάθε επανάληψη φτιάχνεται ένα ranking των δειγμάτων (με βάση του πόσο high frequency περιέχει το καθένα) το οποίο χρησιμοποιείται για να αποφασιστεί τι βάρος/πιθανότητα θα δοθεί σε κάθε δείγμα να επιλεγεί για εκπαίδευση. Το διάνυσμα βαρών/πιθανοτήτων ανανεώνεται κάθε **sampling_distr_upd_freq** επαναλήψεις.\n",
        "- Στην κατασκευή του διανύσματος βαρών από την συνολική πιθανότητα 1 δίνουμε στα **top_k** δείγματα συνολικά **top_k_sampling_prob** (και στα υπόλοιπα length(dataset) - **top_k** δείγματα δίνουμε συνολικά το υπόλοιπο 1 - **top_k_sampling_prob**).\n",
        "- Με **high_freq_better** is True ακολουθούμε την αρχική μας υπόθεση ότι τα δείγματα με high frequency είναι αυτά που θα πρέπει να ταΐσουμε το δίκτυο περισσότερο για να μάθει γρηγορότερα, για False γίνεται το αντίθετο.\n",
        "\n",
        "## Οδηγίες χρήσης για τρέξιμο\n",
        "Πήγαινε στον τίτλο **Execute training (by running main funciton)**. Πήγαινε στο parser.parse_args και όρισε τις τιμές που θες να δοκιμάσεις για grid search. Οι υπερπαράμετροι που σχετίζονται με την ιδέα 4 online είναι:\n",
        "\n",
        "- **top_k**\n",
        "- **top_k_sampling_prob**\n",
        "- **high_freq_better**\n",
        "- **sampling_distr_upd_freq**: Μάλλον είναι οκ στο 1 γιατί ακόμα και έτσι η εκπαίδευση δεν είναι αργή οπότε δεν έχω λόγο να το αυξήσω.\n",
        "\n",
        "Αν κάποιος θέλει να τρέξει κάποιες τιμές για το grid search, έχω βάλει στον φάκελο και ένα αρχείο για να σημειώνουμε τις τιμές των υπερπαραμέτρων που δοκίμασε ο καθένας για να μην τρέχουμε όλοι τα ίδια. Βάλτε GPU P100 (νομίζω είναι ελαφρώς καλύτερη), εμένα για τα 100.000 βήματα που έχω βάλει να είναι το default ένα τρέξιμο που κάνω μόνο με grokfast (δηλαδή **appl_sampl_filter** is False) παίρνει περίπου **7 λεπτά** οπότε καλά είμαστε από χρόνο.\n",
        "\n"
      ],
      "metadata": {
        "id": "5JUhyKOQ_T8r"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import kagglehub\n",
        "\n",
        "# Maybe this is needed if you want to import private datasets\n",
        "# kagglehub.login()\n"
      ],
      "metadata": {
        "id": "f4s6HWPGPSBJ",
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-05T15:07:23.743209Z",
          "iopub.execute_input": "2025-02-05T15:07:23.743449Z",
          "iopub.status.idle": "2025-02-05T15:07:23.74689Z",
          "shell.execute_reply.started": "2025-02-05T15:07:23.743428Z",
          "shell.execute_reply": "2025-02-05T15:07:23.746095Z"
        }
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES,\n",
        "# THEN FEEL FREE TO DELETE THIS CELL.\n",
        "# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON\n",
        "# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR\n",
        "# NOTEBOOK.\n",
        "\n",
        "# hojjatk_mnist_dataset_path = kagglehub.dataset_download(\"hojjatk/mnist-dataset\")\n",
        "\n",
        "# The dataset was uploaded from me but I made it public so you too can probably load it with this line\n",
        "_ = kagglehub.dataset_download(\"konstantinosbarkas/mnist-dataset-processed-from-local\")\n",
        "\n",
        "print(\"Data source import complete.\")\n"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-05T15:07:23.748141Z",
          "iopub.execute_input": "2025-02-05T15:07:23.74841Z",
          "iopub.status.idle": "2025-02-05T15:07:23.83452Z",
          "shell.execute_reply.started": "2025-02-05T15:07:23.748379Z",
          "shell.execute_reply": "2025-02-05T15:07:23.833674Z"
        },
        "id": "HHfjZQeG_T8u",
        "outputId": "841aa5ac-b8e3-4297-d0b6-f24c63910200"
      },
      "outputs": [
        {
          "name": "stdout",
          "text": "Data source import complete.\n",
          "output_type": "stream"
        }
      ],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "# This Python 3 environment comes with many helpful analytics libraries installed\n",
        "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
        "\n",
        "\n",
        "# Input data files are available in the read-only \"../input/\" directory\n",
        "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
        "\n",
        "import os\n",
        "import sys\n",
        "\n",
        "for dirname, _, filenames in os.walk(\"/kaggle/input\"):\n",
        "    for filename in filenames:\n",
        "        print(os.path.join(dirname, filename))\n",
        "\n",
        "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\"\n",
        "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session\n"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-05T15:07:23.835431Z",
          "iopub.execute_input": "2025-02-05T15:07:23.835746Z",
          "iopub.status.idle": "2025-02-05T15:07:23.842174Z",
          "shell.execute_reply.started": "2025-02-05T15:07:23.835714Z",
          "shell.execute_reply": "2025-02-05T15:07:23.841315Z"
        },
        "id": "VqvfCB4W_T8u",
        "outputId": "b425ab4f-f652-4d78-a45b-8d76d343bfcf"
      },
      "outputs": [
        {
          "name": "stdout",
          "text": "/kaggle/input/MNIST_data_processed_from_local/train.pt\n/kaggle/input/MNIST_data_processed_from_local/test.pt\n",
          "output_type": "stream"
        }
      ],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "# !pip install -r /kaggle/input/enter-data-dn-req/requirements.txt\n"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-05T15:07:23.843067Z",
          "iopub.execute_input": "2025-02-05T15:07:23.843358Z",
          "iopub.status.idle": "2025-02-05T15:07:23.857332Z",
          "shell.execute_reply.started": "2025-02-05T15:07:23.843334Z",
          "shell.execute_reply": "2025-02-05T15:07:23.856388Z"
        },
        "id": "QRE5ZOfC_T8v"
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "# Install the Grokfast library\n",
        "!wget https://raw.githubusercontent.com/ironjr/grokfast/main/grokfast.py\n",
        "\n",
        "sys.path.append(\"/kaggle/working\")\n"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-05T15:07:23.85841Z",
          "iopub.execute_input": "2025-02-05T15:07:23.858791Z",
          "iopub.status.idle": "2025-02-05T15:07:24.070941Z",
          "shell.execute_reply.started": "2025-02-05T15:07:23.858724Z",
          "shell.execute_reply": "2025-02-05T15:07:24.069721Z"
        },
        "id": "qSAur71e_T8v",
        "outputId": "e1057250-2605-4a8f-f37b-883b40c84a8b"
      },
      "outputs": [
        {
          "name": "stdout",
          "text": "--2025-02-05 15:07:23--  https://raw.githubusercontent.com/ironjr/grokfast/main/grokfast.py\nResolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.108.133, 185.199.109.133, 185.199.110.133, ...\nConnecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.108.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 1703 (1.7K) [text/plain]\nSaving to: ‘grokfast.py.1’\n\ngrokfast.py.1       100%[===================>]   1.66K  --.-KB/s    in 0s      \n\n2025-02-05 15:07:23 (26.4 MB/s) - ‘grokfast.py.1’ saved [1703/1703]\n\n",
          "output_type": "stream"
        }
      ],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "# import argparse\n",
        "# import gzip\n",
        "import math\n",
        "import random\n",
        "# import struct\n",
        "import time\n",
        "from argparse import ArgumentParser\n",
        "# from collections import Counter, defaultdict, deque\n",
        "from itertools import islice\n",
        "# from pathlib import Path\n",
        "# from typing import Dict, List, Literal, Optional\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "import torchvision\n",
        "# import torchvision.transforms as transforms\n",
        "from functorch import grad, vmap\n",
        "from sklearn.model_selection import train_test_split\n",
        "from torch.autograd import grad\n",
        "\n",
        "# from torch.nn.utils.stateless import functional_call, # This is deprecated, use the next one instead\n",
        "from torch.func import functional_call\n",
        "from torch.utils.data import DataLoader, Subset, WeightedRandomSampler, Dataset\n",
        "from tqdm.auto import tqdm\n",
        "\n",
        "from grokfast import gradfilter_ema\n"
      ],
      "metadata": {
        "id": "QLUi9XZMRpId",
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-05T15:07:24.07202Z",
          "iopub.execute_input": "2025-02-05T15:07:24.072409Z",
          "iopub.status.idle": "2025-02-05T15:07:24.078269Z",
          "shell.execute_reply.started": "2025-02-05T15:07:24.072381Z",
          "shell.execute_reply": "2025-02-05T15:07:24.077195Z"
        }
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "results_dir = \"/kaggle/working/results/mnist_online\"\n",
        "os.makedirs(results_dir, exist_ok=True)\n",
        "dataset_path = \"/kaggle/input/MNIST_data_processed_from_local/\"\n"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-05T15:07:24.079265Z",
          "iopub.execute_input": "2025-02-05T15:07:24.07963Z",
          "iopub.status.idle": "2025-02-05T15:07:24.09659Z",
          "shell.execute_reply.started": "2025-02-05T15:07:24.079572Z",
          "shell.execute_reply": "2025-02-05T15:07:24.095778Z"
        },
        "id": "RgeJu5Va_T8w"
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "optimizer_dict = {\"AdamW\": torch.optim.AdamW, \"Adam\": torch.optim.Adam, \"SGD\": torch.optim.SGD}\n",
        "\n",
        "activation_dict = {\"ReLU\": nn.ReLU, \"Tanh\": nn.Tanh, \"Sigmoid\": nn.Sigmoid, \"GELU\": nn.GELU}\n",
        "\n",
        "loss_function_dict = {\"MSE\": nn.MSELoss, \"CrossEntropy\": nn.CrossEntropyLoss}\n"
      ],
      "metadata": {
        "id": "8hhZpMIuSC4q",
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-05T15:07:24.097485Z",
          "iopub.execute_input": "2025-02-05T15:07:24.097741Z",
          "iopub.status.idle": "2025-02-05T15:07:24.112453Z",
          "shell.execute_reply.started": "2025-02-05T15:07:24.097706Z",
          "shell.execute_reply": "2025-02-05T15:07:24.111791Z"
        }
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "def cycle(iterable):\n",
        "    while True:\n",
        "        for x in iterable:\n",
        "            yield x\n"
      ],
      "metadata": {
        "id": "RIifrNowR89e",
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-05T15:07:24.114965Z",
          "iopub.execute_input": "2025-02-05T15:07:24.115257Z",
          "iopub.status.idle": "2025-02-05T15:07:24.127616Z",
          "shell.execute_reply.started": "2025-02-05T15:07:24.11522Z",
          "shell.execute_reply": "2025-02-05T15:07:24.126847Z"
        }
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "def custom_collate_fn_2(batch):\n",
        "    \"\"\"Custom collate function to handle extra fields in the dataset.\"\"\"\n",
        "    images, labels, _, _ = zip(*batch)  # Ignore the indices and extra_fields for loss computation\n",
        "    images = torch.stack(images)  # Stack images into a single tensor\n",
        "    labels = torch.tensor(labels)  # Convert labels to a tensor\n",
        "    return images, labels\n",
        "\n",
        "\n",
        "\n",
        "def compute_loss(network, dataset, loss_function, device, N=2000, batch_size=50):\n",
        "    \"\"\"Computes mean loss of `network` on `dataset`.\n",
        "    \"\"\"\n",
        "    with torch.no_grad():\n",
        "        N = min(len(dataset), N)\n",
        "        batch_size = min(batch_size, N)\n",
        "        dataset_loader =DataLoader(dataset, batch_size=256, shuffle=False, collate_fn=custom_collate_fn_2)\n",
        "        loss_fn = loss_function_dict[loss_function](reduction='sum')\n",
        "        one_hots = torch.eye(10, 10).to(device)\n",
        "        total = 0\n",
        "        points = 0\n",
        "\n",
        "        for x, labels in islice(dataset_loader, N // batch_size):\n",
        "            y = network(x.to(device))\n",
        "            if loss_function == 'CrossEntropy':\n",
        "                total += loss_fn(y, labels.to(device)).item()\n",
        "            elif loss_function == 'MSE':\n",
        "                total += loss_fn(y, one_hots[labels]).item()\n",
        "            points += len(labels)\n",
        "        return total / points\n",
        "\n",
        "\n",
        "\n",
        "def compute_accuracy(model, dataset, device, N=None):\n",
        "    \"\"\"Utility to compute accuracy on a given dataset.\"\"\"\n",
        "    correct = 0\n",
        "    total = 0\n",
        "\n",
        "    loader = DataLoader(dataset, batch_size=256, shuffle=False, collate_fn=custom_collate_fn_2)\n",
        "\n",
        "    for x, y in loader:  # Unpack index and extra_fields as well\n",
        "        x, y = x.to(device), y.to(device)\n",
        "        with torch.no_grad():\n",
        "            outputs = model(x)\n",
        "            predictions = outputs.argmax(dim=1)\n",
        "        correct += (predictions == y).sum().item()\n",
        "        total += y.size(0)\n",
        "        if N is not None and total >= N:\n",
        "            break\n",
        "    return correct / total\n",
        "\n",
        "\n",
        "# def compute_loss(model, dataset, loss_function_name, device, N=None):\n",
        "#     \"\"\"Utility to compute the average loss on a given dataset.\"\"\"\n",
        "#     loss_fn = loss_function_dict[loss_function_name]()\n",
        "\n",
        "#     loader = DataLoader(dataset, batch_size=256, shuffle=False, collate_fn=custom_collate_fn_2)\n",
        "#     total_loss = 0.0\n",
        "#     count = 0\n",
        "#     one_hots = torch.eye(10, device=device)\n",
        "#     for x, y in loader:\n",
        "#         x, y = x.to(device), y.to(device)\n",
        "#         with torch.no_grad():\n",
        "#             outputs = model(x)\n",
        "#             if loss_function_name == \"CrossEntropy\":\n",
        "#                 loss = loss_fn(outputs, y)\n",
        "#             elif loss_function_name == \"MSE\":\n",
        "#                 loss = loss_fn(outputs, one_hots[y])\n",
        "#         batch_size = x.size(0)\n",
        "#         total_loss += loss.item() * batch_size\n",
        "#         count += batch_size\n",
        "#         if N is not None and count >= N:\n",
        "#             break\n",
        "#     return total_loss / count\n",
        ""
      ],
      "metadata": {
        "id": "zlciE-2nKkLg",
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-05T15:21:29.68109Z",
          "iopub.execute_input": "2025-02-05T15:21:29.681477Z",
          "iopub.status.idle": "2025-02-05T15:21:29.691012Z",
          "shell.execute_reply.started": "2025-02-05T15:21:29.681445Z",
          "shell.execute_reply": "2025-02-05T15:21:29.689866Z"
        }
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "# Added extra fields to keep ema_gra and history\n",
        "# In this implementation I use variance metric --> I don't also store deviation metric for memory efficiency\n",
        "class MyMNIST(torchvision.datasets.MNIST):\n",
        "    def __init__(self, data, targets, transform=None):\n",
        "        \"\"\"\n",
        "        Custom dataset to simulate MyMNIST behavior with extra fields.\n",
        "        Args:\n",
        "            data: Tensor of shape [N, 28, 28].\n",
        "            targets: Tensor of shape [N].\n",
        "            transform: Transformations to apply to the images.\n",
        "        \"\"\"\n",
        "        self.data = data.to(torch.float32)\n",
        "        self.targets = targets\n",
        "        self.transform = transform\n",
        "\n",
        "        # Initialize extra fields\n",
        "        self.extra_fields = [\n",
        "            {\n",
        "                \"ema_grad\": 0.0,  # EMA of gradient\n",
        "                \"num_updates\": 0,\n",
        "                # \"deviation_metric\": 0.0, # Deviation metric\n",
        "                \"variance_metric\": 0.0,  # Variance metric\n",
        "            }\n",
        "            for _ in range(len(self.data))\n",
        "        ]\n",
        "\n",
        "    def __getitem__(self, index):\n",
        "        \"\"\"\n",
        "        Returns a single data sample and its associated extra fields.\n",
        "        \"\"\"\n",
        "        img, target = self.data[index], self.targets[index]\n",
        "        if self.transform:\n",
        "            img = self.transform(img)\n",
        "        extra_field = self.extra_fields[index]\n",
        "        return img, target, index, extra_field\n",
        "\n",
        "    def update_fields(self, indices, grad_stats, ema_alpha=0.9):\n",
        "        \"\"\"\n",
        "        Update the extra fields for specified dataset indices.\n",
        "        \"\"\"\n",
        "\n",
        "        for idx, grad in zip(indices, grad_stats):\n",
        "            # Update EMA\n",
        "            sample_field = self.extra_fields[idx]\n",
        "\n",
        "            current_ema = sample_field[\"ema_grad\"]\n",
        "            updated_ema = ema_alpha * current_ema + (1 - ema_alpha) * grad\n",
        "            sample_field[\"ema_grad\"] = updated_ema\n",
        "\n",
        "            deviation = abs(grad - updated_ema)\n",
        "\n",
        "            num_updates = sample_field[\"num_updates\"] + 1  # Increment the update count\n",
        "            # current_avg_deviation = sample_field[\"deviation_metric\"]\n",
        "            current_avg_deviation = sample_field[\"variance_metric\"] ** 0.5\n",
        "            new_avg_deviation = ((current_avg_deviation * (num_updates - 1)) + deviation) / num_updates\n",
        "\n",
        "            # Update the deviation metric and number of updates\n",
        "            #sample_field[\"deviation_metric\"] = new_avg_deviation\n",
        "            sample_field[\"num_updates\"] = num_updates\n",
        "\n",
        "            # sample_field[\"deviation_metric\"] += deviation\n",
        "\n",
        "            # Optionally update variance-like metric\n",
        "            # Variance estimate (for higher sensitivity to fast changes)\n",
        "            sample_field[\"variance_metric\"] = new_avg_deviation**2\n"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-05T15:07:24.140792Z",
          "iopub.execute_input": "2025-02-05T15:07:24.140999Z",
          "iopub.status.idle": "2025-02-05T15:07:24.162185Z",
          "shell.execute_reply.started": "2025-02-05T15:07:24.14098Z",
          "shell.execute_reply": "2025-02-05T15:07:24.161473Z"
        },
        "id": "StAlrGcm_T8x"
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "def custom_collate_fn(batch):\n",
        "    images, labels, indices, extra_fields = zip(*batch)\n",
        "    images = torch.stack(images)  # Stack images into a single tensor\n",
        "    labels = torch.tensor(labels)  # Convert labels to a tensor\n",
        "    return images, labels, indices, extra_fields\n"
      ],
      "metadata": {
        "id": "zif6Q-IEjFJ7",
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-05T15:07:24.163064Z",
          "iopub.execute_input": "2025-02-05T15:07:24.163378Z",
          "iopub.status.idle": "2025-02-05T15:07:24.183449Z",
          "shell.execute_reply.started": "2025-02-05T15:07:24.163353Z",
          "shell.execute_reply": "2025-02-05T15:07:24.182424Z"
        }
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "# Needed for per sample gradient computations\n",
        "def select_random_subset(tensor, percentage, seed=42):\n",
        "    \"\"\"\n",
        "    Flatten the parameter dimensions for each batch sample, select a percentage of elements,\n",
        "    and return a tensor with shape [batch_size, selected_elements].\n",
        "\n",
        "    Args:\n",
        "        tensor (torch.Tensor): The gradient tensor of shape [batch_size, *parameter_dims].\n",
        "        percentage (float): The percentage of elements to select.\n",
        "        seed (int): Random seed for reproducibility.\n",
        "\n",
        "    Returns:\n",
        "        torch.Tensor: A tensor of shape [batch_size, selected_elements].\n",
        "    \"\"\"\n",
        "    batch_size, *param_dims = tensor.shape  # Extract batch and parameter dimensions\n",
        "    total_params = torch.prod(torch.tensor(param_dims))  # Total parameters per sample\n",
        "    subset_size = int(total_params * percentage)  # 20% of parameters\n",
        "\n",
        "    # Set seed for reproducibility\n",
        "    random.seed(seed)\n",
        "    indices = random.sample(range(total_params), subset_size)  # Random indices for selection\n",
        "\n",
        "    # Flatten parameter dimensions and select elements for each batch\n",
        "    flat_tensor = tensor.view(batch_size, -1)  # Flatten parameter dimensions for each sample\n",
        "    selected_subset = flat_tensor[:, indices]  # Select the same random indices across the batch\n",
        "\n",
        "    return selected_subset\n"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-05T15:07:24.184387Z",
          "iopub.execute_input": "2025-02-05T15:07:24.184776Z",
          "iopub.status.idle": "2025-02-05T15:07:24.199082Z",
          "shell.execute_reply.started": "2025-02-05T15:07:24.184745Z",
          "shell.execute_reply": "2025-02-05T15:07:24.198243Z"
        },
        "id": "zfU_CUSe_T8y"
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "# Needed for online sample filtering\n",
        "def rank_to_sampling_weights(my_dataset, top_k, top_k_sampling_prob, high_freq_better):\n",
        "    \"\"\"\n",
        "    Rank samples by variance_metric and assign sampling weights.\n",
        "\n",
        "    Parameters:\n",
        "    - my_dataset: MyMNIST object.\n",
        "    - top_k: Fraction of top samples to assign higher sampling probability.\n",
        "    - top_k_sampling_prob: Probability assigned to the top_k fraction of samples.\n",
        "\n",
        "    Returns:\n",
        "    - new_weights: List of sampling weights for each sample.\n",
        "    \"\"\"\n",
        "    # Calculate the number of top_k samples\n",
        "    num_samples = len(my_dataset)\n",
        "    top_k_count = int(top_k * num_samples)\n",
        "\n",
        "    # Sort indices by variance_metric in descending order\n",
        "    sorted_indices = sorted(\n",
        "        range(num_samples),\n",
        "        key=lambda idx: my_dataset.dataset.extra_fields[idx][\"variance_metric\"],\n",
        "        reverse=high_freq_better,\n",
        "    )\n",
        "\n",
        "    # Initialize new_weights with zeros\n",
        "    new_weights = [0.0] * num_samples\n",
        "\n",
        "    # Assign weights to the top_k samples\n",
        "    for idx in sorted_indices[:top_k_count]:\n",
        "        new_weights[idx] = top_k_sampling_prob / top_k_count\n",
        "\n",
        "    # Assign weights to the rest of the samples\n",
        "    for idx in sorted_indices[top_k_count:]:\n",
        "        new_weights[idx] = (1 - top_k_sampling_prob) / (num_samples - top_k_count)\n",
        "\n",
        "    return new_weights\n"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-05T15:07:24.199959Z",
          "iopub.execute_input": "2025-02-05T15:07:24.200368Z",
          "iopub.status.idle": "2025-02-05T15:07:24.218928Z",
          "shell.execute_reply.started": "2025-02-05T15:07:24.200342Z",
          "shell.execute_reply": "2025-02-05T15:07:24.21808Z"
        },
        "id": "S_TrJJzP_T8y"
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "markdown",
      "source": [
        "## def main"
      ],
      "metadata": {
        "id": "cKswyT_3_T8y"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import random\n",
        "from functorch import vmap, grad\n",
        "from torch.nn.utils.stateless import functional_call\n",
        "\n",
        "def main(args):\n",
        "    log_freq = math.ceil(args.optimization_steps / 150)\n",
        "\n",
        "    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
        "    dtype = torch.float32\n",
        "    one_hots = torch.eye(10, 10).to(device)\n",
        "\n",
        "    torch.set_default_dtype(dtype)\n",
        "    torch.manual_seed(args.seed)\n",
        "    torch.cuda.manual_seed_all(args.seed)\n",
        "    random.seed(args.seed)\n",
        "    np.random.seed(args.seed)\n",
        "\n",
        "    #                                 Load dataset\n",
        "    #   -------------------------------------------------------------------------------   #\n",
        "    train_data = torch.load(f\"{dataset_path}/train.pt\", weights_only=True)\n",
        "    test_data = torch.load(f\"{dataset_path}/test.pt\", weights_only=True)\n",
        "\n",
        "    transform = None\n",
        "\n",
        "    train_images, train_labels = train_data\n",
        "    test_images, test_labels = test_data\n",
        "\n",
        "    # Create MyMNIST datasets\n",
        "    train_dataset = MyMNIST(train_images, train_labels, transform=transform)\n",
        "    test_dataset = MyMNIST(test_images, test_labels, transform=transform)\n",
        "    test = test_dataset  # For compatibility with our older code\n",
        "\n",
        "    # Create indices & stratify\n",
        "    train_indices = list(range(len(train_dataset)))\n",
        "    train_labels = [train_dataset.targets[i].item() for i in train_indices]\n",
        "\n",
        "    # Use train_test_split with stratification to randomly select a specified number of samples (args.train_points)\n",
        "    stratified_indices, _ = train_test_split(\n",
        "        train_indices,\n",
        "        train_size=args.train_points,\n",
        "        stratify=train_labels,\n",
        "        random_state=args.seed,\n",
        "    )\n",
        "\n",
        "    train_subset = Subset(train_dataset, stratified_indices)\n",
        "\n",
        "    # Create initial weights for uniform sampling\n",
        "    weights = [1.0] * len(train_subset)\n",
        "    sampler = WeightedRandomSampler(weights, len(weights))\n",
        "\n",
        "    train_loader = DataLoader(train_subset, batch_size=args.batch_size, sampler=sampler, collate_fn=custom_collate_fn)\n",
        "\n",
        "    activation_fn = activation_dict[args.activation]\n",
        "\n",
        "    #                                   Create model\n",
        "    #   -------------------------------------------------------------------------------   #\n",
        "\n",
        "    layers = [nn.Flatten()]\n",
        "    for i in range(args.depth):\n",
        "        if i == 0:\n",
        "            layers.append(nn.Linear(784, args.width))\n",
        "            layers.append(activation_fn())\n",
        "        elif i == args.depth - 1:\n",
        "            layers.append(nn.Linear(args.width, 10))\n",
        "        else:\n",
        "            layers.append(nn.Linear(args.width, args.width))\n",
        "            layers.append(activation_fn())\n",
        "    mlp = nn.Sequential(*layers).to(device)\n",
        "    with torch.no_grad():\n",
        "        for p in mlp.parameters():\n",
        "            p.data = args.initialization_scale * p.data\n",
        "    nparams = sum([p.numel() for p in mlp.parameters() if p.requires_grad])\n",
        "    print(f\"Number of parameters: {nparams}\")\n",
        "\n",
        "    # create optimizer\n",
        "    assert args.optimizer in optimizer_dict, f\"Unsupported optimizer choice: {args.optimizer}\"\n",
        "    optimizer = optimizer_dict[args.optimizer](mlp.parameters(), lr=args.lr, weight_decay=args.weight_decay)\n",
        "\n",
        "    # define loss function\n",
        "    assert args.loss_function in loss_function_dict\n",
        "    loss_fn = loss_function_dict[args.loss_function]()\n",
        "\n",
        "    # Needed for per sample gradient computations\n",
        "    if args.appl_sampl_filter:\n",
        "        # Define a function for forward + loss computation\n",
        "        def compute_loss_vmap(params, buffers, model, x, y):\n",
        "            # Use functional_call to pass parameters and buffers explicitly\n",
        "            logits = functional_call(model, {**params, **buffers}, x.unsqueeze(0))  # Single input\n",
        "            loss = loss_fn(logits, y.unsqueeze(0))  # Single output\n",
        "            return loss.mean()\n",
        "\n",
        "        # Prepare model parameters and buffers\n",
        "        params_and_buffers = {**dict(mlp.named_parameters()), **dict(mlp.named_buffers())}\n",
        "\n",
        "        params = {k: v for k, v in params_and_buffers.items() if v.requires_grad}\n",
        "        buffers = {k: v for k, v in params_and_buffers.items() if not v.requires_grad}\n",
        "\n",
        "\n",
        "        # Create the gradient function\n",
        "        gradient_fn = grad(compute_loss_vmap)\n",
        "\n",
        "        # Initialize EMA and metric history for each sample\n",
        "        gradient_ema = [0.0 for _ in range(len(train_subset))]\n",
        "        # gradient_metric_history = [[] for _ in range(len(train_subset))] # Probably unused\n",
        "\n",
        "    #                           Start Training below\n",
        "    #   -------------------------------------------------------------------------------   #\n",
        "    log_steps, train_losses, train_accuracies, test_losses, test_accuracies = [], [], [], [], []\n",
        "    one_hots = torch.eye(10, 10).to(device)\n",
        "\n",
        "    grads = None\n",
        "\n",
        "    with tqdm(total=args.optimization_steps, dynamic_ncols=True) as pbar:\n",
        "\n",
        "        reached_early_stop = False  # Flag to indicate early stopping\n",
        "        steps_to_reach_val_acc = None  # Variable to store steps for 0.95 validation accuracy\n",
        "\n",
        "        stable_threshold = 100  # Number of steps the validation accuracy must remain > 0.9\n",
        "        stable_steps = 0  # Counter for steps validation accuracy remains above 0.9\n",
        "\n",
        "        for step in range(args.optimization_steps):\n",
        "            if reached_early_stop: break\n",
        "            # Update the sampling distribution (according to the latest ranking of the samples)\n",
        "            if args.appl_sampl_filter:\n",
        "                if step % args.sampling_distr_upd_freq == 0 and step != 0:\n",
        "                    # Update the weights of the sampling based on the latest gradient metrics\n",
        "                    weights = rank_to_sampling_weights(train_subset, args.top_k, args.top_k_sampling_prob, args.high_freq_better)\n",
        "                    sampler = WeightedRandomSampler(weights, num_samples=len(weights))\n",
        "                    train_loader = DataLoader(\n",
        "                        train_subset,\n",
        "                        batch_size=args.batch_size,\n",
        "                        sampler=sampler,\n",
        "                        collate_fn=custom_collate_fn,\n",
        "                    )\n",
        "\n",
        "            for batch in islice(cycle(train_loader),1):\n",
        "                x, labels, indices, _ = batch\n",
        "                do_log = (step < 30) or (step < 150 and step % 10 == 0) or step % log_freq == 0\n",
        "                if do_log:\n",
        "                    with torch.no_grad():\n",
        "                        train_losses.append(compute_loss(mlp, train_subset, args.loss_function, device, N=len(train_subset)))\n",
        "                        train_accuracies.append(compute_accuracy(mlp, train_subset, device, N=len(train_subset)))\n",
        "                        test_losses.append(compute_loss(mlp, test, args.loss_function, device, N=len(test)))\n",
        "                        test_accuracies.append(compute_accuracy(mlp, test, device, N=len(test)))\n",
        "                        log_steps.append(step)\n",
        "                        pbar.set_description(\n",
        "                            \"Loss: {0:1.1e}|{1:1.1e}. Acc: {2:2.1f}%|{3:2.1f}%\".format(\n",
        "                                train_losses[-1],\n",
        "                                test_losses[-1],\n",
        "                                train_accuracies[-1] * 100,\n",
        "                                test_accuracies[-1] * 100,\n",
        "                            )\n",
        "                        )\n",
        "\n",
        "                optimizer.zero_grad()\n",
        "\n",
        "                x, labels = x.to(device), labels.to(device)\n",
        "                y = mlp(x.to(device))\n",
        "                if args.loss_function == \"CrossEntropy\":\n",
        "                    # Use integer labels for CrossEntropyLoss\n",
        "                    loss = loss_fn(y, labels)\n",
        "                elif args.loss_function == \"MSE\":\n",
        "                    loss = loss_fn(y, one_hots[labels])\n",
        "\n",
        "                loss.backward() # Do I need create_graph?\n",
        "                #loss.backward(create_graph=True)\n",
        "\n",
        "                if args.appl_sampl_filter:  # Unnecessary if we are not applying sample filtering\n",
        "                    # -----------------------------------------------------------------\n",
        "                    #   Gradient Stats: Capture grads for each sample\n",
        "                    # -----------------------------------------------------------------\n",
        "                    # Identify the last two Linear layers dynamically\n",
        "                    batch_gradients = []\n",
        "\n",
        "                    with torch.no_grad():\n",
        "                        per_sample_grads = vmap(gradient_fn, in_dims=(None, None, None, 0, 0))(\n",
        "                            params, buffers, mlp, x, labels\n",
        "                        )\n",
        "\n",
        "                        # Extract gradients for the target layers\n",
        "                        last_layer_grad = per_sample_grads[\"3.weight\"]  # Adjust key as needed\n",
        "                        second_last_layer_grad = per_sample_grads[\"5.weight\"]\n",
        "\n",
        "                        # Select a subset of gradients\n",
        "                        percentage_s_l = 0.2\n",
        "                        percentage_l = 0.2\n",
        "                        selected_last = select_random_subset(last_layer_grad, percentage_l, seed=42)\n",
        "                        selected_second_last = select_random_subset(second_last_layer_grad, percentage_s_l, seed=42)\n",
        "\n",
        "                        # Compute the average and detach\n",
        "                        selected_last_avg = selected_last.mean(dim=-1).detach().cpu()\n",
        "                        selected_second_last_avg = selected_second_last.mean(dim=-1).detach().cpu()\n",
        "                        total_avg = (selected_last_avg + selected_second_last_avg) / 2\n",
        "\n",
        "                    train_subset.dataset.update_fields(indices, total_avg, args.ema_alpha_sampl_rank)\n",
        "\n",
        "                    # -----------------------------------------------------------------\n",
        "                    # -----------------------------------------------------------------\n",
        "\n",
        "                # Grokfast (EMA)\n",
        "                # Add required code for applying grokfast\n",
        "\n",
        "                if args.filter == \"none\":\n",
        "                    pass\n",
        "                elif args.filter == \"ma\":\n",
        "                    grads = gradfilter_ma(mlp, grads=grads, window_size=args.window_size, lamb=args.lamb, trigger=trigger)\n",
        "                elif args.filter == \"ema\":\n",
        "                    grads = gradfilter_ema(mlp, grads=grads, alpha=args.alpha, lamb=args.lamb)\n",
        "                else:\n",
        "                    raise ValueError(f\"Invalid gradient filter type `{args.filter}`\")\n",
        "\n",
        "                optimizer.step()\n",
        "\n",
        "                # Check for early stopping conditions\n",
        "                test_acc = test_accuracies[-1] if len(test_accuracies) > 0 else 0\n",
        "\n",
        "                # # For early stopping at some val accuracy\n",
        "                # if test_acc >= 0.9 and steps_to_reach_val_acc is None:\n",
        "                #     steps_to_reach_val_acc = step  # Record the first step reaching 0.9 validation accuracy\n",
        "\n",
        "                # if test_acc > 0.85:\n",
        "                #     stable_steps += 1\n",
        "                # else:\n",
        "                #     stable_steps = 0  # Reset counter if accuracy drops below 0.85\n",
        "\n",
        "                # if stable_steps >= stable_threshold and test_acc >= 0.9:\n",
        "                #     reached_early_stop = True\n",
        "                #     print(f\"Validation accuracy of 0.9 reached and remained > 0.85 for {stable_threshold} step at step {step}\")\n",
        "\n",
        "                pbar.update(1)\n",
        "\n",
        "\n",
        "    # Save results\n",
        "    specific_result_dir = f\"mnist_{args.label}.pt\"\n",
        "    results_filename = os.path.join(results_dir, specific_result_dir)\n",
        "    torch.save(\n",
        "        {\n",
        "            \"its\": log_steps,\n",
        "            \"train_acc\": train_accuracies,\n",
        "            \"train_loss\": train_losses,\n",
        "            \"val_acc\": test_accuracies,\n",
        "            \"val_loss\": test_losses,\n",
        "            \"steps_to_reach\": steps_to_reach_val_acc,\n",
        "            \"model_state_dict\": mlp.state_dict(),  # Save the model's state dictionary, maybe unnecessary\n",
        "        },\n",
        "        results_filename,\n",
        "    )\n",
        "\n",
        "    print(f\"\\nSteps needed to reach 0.9 validation accuracy: {steps_to_reach_val_acc}\")\n"
      ],
      "metadata": {
        "id": "LWPwaBWpSF52",
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-05T15:46:01.106506Z",
          "iopub.execute_input": "2025-02-05T15:46:01.10692Z",
          "iopub.status.idle": "2025-02-05T15:46:01.132016Z",
          "shell.execute_reply.started": "2025-02-05T15:46:01.106888Z",
          "shell.execute_reply": "2025-02-05T15:46:01.130799Z"
        }
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "# Remove the extra arguments passed by the Jupyter Notebook kernel\n",
        "sys.argv = [\"\"]\n"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-05T14:48:08.980865Z",
          "iopub.execute_input": "2025-02-05T14:48:08.981088Z",
          "iopub.status.idle": "2025-02-05T14:48:09.000391Z",
          "shell.execute_reply.started": "2025-02-05T14:48:08.98107Z",
          "shell.execute_reply": "2025-02-05T14:48:08.999795Z"
        },
        "id": "kwnUXn9x_T8y"
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Execute training (by running main function)"
      ],
      "metadata": {
        "id": "b0_ad6C6_T8z"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "From now on i just train networks with different configurations every timeand then I print their results after."
      ],
      "metadata": {
        "id": "GUEQ6kA6_T8z"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Below is:\n",
        "\n",
        "    * no grokfast applied\n",
        "    * no filtering\n",
        "\n",
        "            FOR MSE LOSS\n",
        "            "
      ],
      "metadata": {
        "id": "Ybo50KMe_T8z"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "if __name__ == \"__main__\":\n",
        "    # Same as used in paper of Grokfast\n",
        "    parser = ArgumentParser(description=\"Train a model on MNIST without custom sampling\")\n",
        "\n",
        "    parser.add_argument(\"--label\", type=str, default=\"\")\n",
        "    parser.add_argument(\"--seed\", type=int, default=0)\n",
        "\n",
        "    parser.add_argument(\"--train_points\", type=int, default=1000)\n",
        "    parser.add_argument(\"--optimization_steps\", type=int, default=100000)\n",
        "    parser.add_argument(\"--batch_size\", type=int, default=200)\n",
        "    parser.add_argument(\"--loss_function\", type=str, default=\"MSE\") #MSE or CrossEntropy\n",
        "    parser.add_argument(\"--optimizer\", type=str, default=\"AdamW\")\n",
        "    parser.add_argument(\"--weight_decay\", type=float, default=2.00)\n",
        "    parser.add_argument(\"--lr\", type=float, default=1e-3)\n",
        "    parser.add_argument(\"--initialization_scale\", type=float, default=8.0)\n",
        "    parser.add_argument(\"--download_directory\", type=str, default=\".\")\n",
        "    parser.add_argument(\"--depth\", type=int, default=3)\n",
        "    parser.add_argument(\"--width\", type=int, default=200)\n",
        "    parser.add_argument(\"--activation\", type=str, default=\"ReLU\")\n",
        "\n",
        "    # Grokfast\n",
        "    parser.add_argument(\"--filter\", type=str, choices=[\"none\", \"ma\", \"ema\", \"fir\"], default=\"none\")\n",
        "    parser.add_argument(\"--alpha\", type=float, default=0.8)\n",
        "    parser.add_argument(\"--lamb\", type=float, default=0.1)\n",
        "\n",
        "    # Samples ranking\n",
        "    parser.add_argument(\"--ema_alpha_sampl_rank\", type=float, default=0.9)\n",
        "\n",
        "    # Boolean arguements need this due to bad behavior of parser.parse_args\n",
        "    def boolean_string(s):\n",
        "        if s not in {\"False\", \"True\"}:\n",
        "            raise ValueError(\"Not a valid boolean string\")\n",
        "        return s == \"True\"\n",
        "\n",
        "    # These are the hyperparameters related to our online sampling filtering algorithm\n",
        "    parser.add_argument(\"--appl_sampl_filter\", type=boolean_string, default=True)  # If False, perform regular training\n",
        "    parser.add_argument(\"--sampling_distr_upd_freq\", type=int, default=1)  # How often to update the sampling distribution\n",
        "    parser.add_argument(\"--top_k\", type=float, default=0.1)  # Fraction of samples to select more frequently\n",
        "    parser.add_argument(\"--top_k_sampling_prob\", type=float, default=0.9)  # Probability of selecting a sample from the top-k\n",
        "    parser.add_argument(\"--high_freq_better\", type=boolean_string, default=True)  # If True, samples with higher frequency gradient content are considered better for training\n",
        "\n",
        "    # -----------------------------------------------------------------\n",
        "    # Try different hyperparameter values for your grid search here\n",
        "    # -----------------------------------------------------------------\n",
        "    args = parser.parse_args(\n",
        "        [\n",
        "            \"--appl_sampl_filter\", \"False\", # booleans as non strings in order to work\n",
        "            \"--sampling_distr_upd_freq\", \"1\", # the rest as strings for some reason\n",
        "            \"--top_k\", \"0.1\",\n",
        "            \"--top_k_sampling_prob\", \"0.9\",\n",
        "            \"--high_freq_better\", \"True\",\n",
        "        ]\n",
        "    )\n",
        "    # -----------------------------------------------------------------\n",
        "    # -----------------------------------------------------------------\n",
        "\n",
        "    # Create arg.label for the filename of the saved results\n",
        "    if not args.appl_sampl_filter:\n",
        "        args.label = f\"filter{args.filter}_sampling_{args.appl_sampl_filter}\"\n",
        "    else:\n",
        "        args.label = f\"high_freq_{args.high_freq_better}_top_k_{args.top_k}_top_k_prob_{args.top_k_sampling_prob}_upd_freq_{args.sampling_distr_upd_freq}\"\n",
        "\n",
        "    # Training with time recording\n",
        "\n",
        "    # Start the timer\n",
        "    start_time = time.time()\n",
        "\n",
        "    # Call your training function\n",
        "    main(args)\n",
        "\n",
        "    # End the timer\n",
        "    end_time = time.time()\n",
        "\n",
        "    # Calculate elapsed time\n",
        "    elapsed_time = end_time - start_time\n",
        "\n",
        "    # Convert to minutes and seconds (optional)\n",
        "    minutes, seconds = divmod(elapsed_time, 60)\n",
        "\n",
        "    print(f\"Training completed in {int(minutes)} minutes and {int(seconds)} seconds.\")\n",
        "    print(f\"label:{args.label}\")"
      ],
      "metadata": {
        "id": "MawvRmI9yt3T",
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-05T15:26:18.301539Z",
          "iopub.execute_input": "2025-02-05T15:26:18.302011Z",
          "iopub.status.idle": "2025-02-05T15:33:18.348171Z",
          "shell.execute_reply.started": "2025-02-05T15:26:18.301963Z",
          "shell.execute_reply": "2025-02-05T15:33:18.347238Z"
        },
        "outputId": "635c8eef-644f-4146-d337-72c148e85c09",
        "colab": {
          "referenced_widgets": [
            "bd5f88f39ed3469bb99e22e3e46bed5a"
          ]
        }
      },
      "outputs": [
        {
          "name": "stdout",
          "text": "Number of parameters: 199210\n",
          "output_type": "stream"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "  0%|          | 0/100000 [00:00<?, ?it/s]",
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "bd5f88f39ed3469bb99e22e3e46bed5a"
            }
          },
          "metadata": {}
        },
        {
          "name": "stdout",
          "text": "\nSteps needed to reach 0.9 validation accuracy: None\nTraining completed in 7 minutes and 0 seconds.\nlabel:filternone_sampling_False\n",
          "output_type": "stream"
        }
      ],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "# Load the saved results for plotting/printing\n",
        "\n",
        "args.label=\"filternone_sampling_False\"\n",
        "\n",
        "\n",
        "results_dir = \"/kaggle/working/results/mnist_online\"\n",
        "filename = f\"mnist_{args.label}.pt\"\n",
        "results_filename = os.path.join(results_dir, filename)\n",
        "\n",
        "filename_plot_acc = f\"mnist_{args.label}_acc.png\"\n",
        "results_filename_plot_acc = os.path.join(results_dir, filename_plot_acc)\n",
        "\n",
        "filename_plot_loss = f\"mnist_{args.label}_loss.png\"\n",
        "results_filename_plot_loss = os.path.join(results_dir, filename_plot_loss)\n",
        "\n",
        "\n",
        "\n",
        "results = torch.load(results_filename, weights_only=True)\n",
        "\n",
        "\n",
        "# Extract data from results\n",
        "its = results[\"its\"]  # Optimization steps\n",
        "train_acc = results[\"train_acc\"]  # Training accuracy\n",
        "val_acc = results[\"val_acc\"]  # Validation accuracy\n",
        "train_loss = results[\"train_loss\"]  # Training loss\n",
        "val_loss = results[\"val_loss\"]  # Validation loss\n",
        "steps_to_reach = results[\"steps_to_reach\"]  # Steps to reach 90% validation accuracy\n",
        "\n",
        "print(f\"Steps needed to reach 0.9 validation accuracy: {steps_to_reach}\")\n",
        "\n",
        "# Plot Accuracy\n",
        "plt.figure()\n",
        "plt.plot(its, train_acc, label=\"train\")\n",
        "plt.plot(its, val_acc, label=\"val\")\n",
        "\n",
        "# Find and annotate the maximum validation accuracy\n",
        "max_val_acc = max(val_acc)\n",
        "max_val_idx = val_acc.index(max_val_acc)\n",
        "plt.annotate(f\"Max Val Acc: {max_val_acc:.4f}\",\n",
        "             (its[max_val_idx], max_val_acc),\n",
        "             textcoords=\"offset points\",\n",
        "             xytext=(0,10),\n",
        "             ha='center',\n",
        "             fontsize=10,\n",
        "             color='red')\n",
        "\n",
        "plt.legend()\n",
        "plt.title(\"Accuracy - Grokfast:no Sample Filtering:no\")\n",
        "plt.xlabel(\"Optimization Steps\")\n",
        "plt.ylabel(\"Accuracy\")\n",
        "#plt.xscale(\"log\", base=10)\n",
        "plt.grid()\n",
        "plt.savefig(results_filename_plot_acc, dpi=150)\n",
        "\n",
        "print(\"Plots loaded successfully.\")"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-05T16:39:02.277143Z",
          "iopub.execute_input": "2025-02-05T16:39:02.277509Z",
          "iopub.status.idle": "2025-02-05T16:39:02.671509Z",
          "shell.execute_reply.started": "2025-02-05T16:39:02.27748Z",
          "shell.execute_reply": "2025-02-05T16:39:02.670546Z"
        },
        "id": "7EFLYEB3_T8z",
        "outputId": "b7ee5960-3cda-47ee-ef08-637896416148"
      },
      "outputs": [
        {
          "name": "stdout",
          "text": "Steps needed to reach 0.9 validation accuracy: None\nPlots loaded successfully.\n",
          "output_type": "stream"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 640x480 with 1 Axes>",
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "if __name__ == \"__main__\":\n",
        "    # Same as used in paper of Grokfast\n",
        "    parser = ArgumentParser(description=\"Train a model on MNIST without custom sampling\")\n",
        "\n",
        "    parser.add_argument(\"--label\", type=str, default=\"\")\n",
        "    parser.add_argument(\"--seed\", type=int, default=0)\n",
        "\n",
        "    parser.add_argument(\"--train_points\", type=int, default=1000)\n",
        "    parser.add_argument(\"--optimization_steps\", type=int, default=100000)\n",
        "    parser.add_argument(\"--batch_size\", type=int, default=200)\n",
        "    parser.add_argument(\"--loss_function\", type=str, default=\"MSE\") #MSE or CrossEntropy\n",
        "    parser.add_argument(\"--optimizer\", type=str, default=\"AdamW\")\n",
        "    parser.add_argument(\"--weight_decay\", type=float, default=2.00)\n",
        "    parser.add_argument(\"--lr\", type=float, default=1e-3)\n",
        "    parser.add_argument(\"--initialization_scale\", type=float, default=8.0)\n",
        "    parser.add_argument(\"--download_directory\", type=str, default=\".\")\n",
        "    parser.add_argument(\"--depth\", type=int, default=3)\n",
        "    parser.add_argument(\"--width\", type=int, default=200)\n",
        "    parser.add_argument(\"--activation\", type=str, default=\"ReLU\")\n",
        "\n",
        "    # Grokfast\n",
        "    parser.add_argument(\"--filter\", type=str, choices=[\"none\", \"ma\", \"ema\", \"fir\"], default=\"ema\")\n",
        "    parser.add_argument(\"--alpha\", type=float, default=0.8)\n",
        "    parser.add_argument(\"--lamb\", type=float, default=0.1)\n",
        "\n",
        "    # Samples ranking\n",
        "    parser.add_argument(\"--ema_alpha_sampl_rank\", type=float, default=0.9)\n",
        "\n",
        "    # Boolean arguements need this due to bad behavior of parser.parse_args\n",
        "    def boolean_string(s):\n",
        "        if s not in {\"False\", \"True\"}:\n",
        "            raise ValueError(\"Not a valid boolean string\")\n",
        "        return s == \"True\"\n",
        "\n",
        "    # These are the hyperparameters related to our online sampling filtering algorithm\n",
        "    parser.add_argument(\"--appl_sampl_filter\", type=boolean_string, default=True)  # If False, perform regular training\n",
        "    parser.add_argument(\"--sampling_distr_upd_freq\", type=int, default=1)  # How often to update the sampling distribution\n",
        "    parser.add_argument(\"--top_k\", type=float, default=0.1)  # Fraction of samples to select more frequently\n",
        "    parser.add_argument(\"--top_k_sampling_prob\", type=float, default=0.9)  # Probability of selecting a sample from the top-k\n",
        "    parser.add_argument(\"--high_freq_better\", type=boolean_string, default=True)  # If True, samples with higher frequency gradient content are considered better for training\n",
        "\n",
        "    # -----------------------------------------------------------------\n",
        "    # Try different hyperparameter values for your grid search here\n",
        "    # -----------------------------------------------------------------\n",
        "    args = parser.parse_args(\n",
        "        [\n",
        "            \"--appl_sampl_filter\", \"False\", # booleans as non strings in order to work\n",
        "            \"--sampling_distr_upd_freq\", \"1\", # the rest as strings for some reason\n",
        "            \"--top_k\", \"0.1\",\n",
        "            \"--top_k_sampling_prob\", \"0.9\",\n",
        "            \"--high_freq_better\", \"True\",\n",
        "        ]\n",
        "    )\n",
        "    # -----------------------------------------------------------------\n",
        "    # -----------------------------------------------------------------\n",
        "\n",
        "    # Create arg.label for the filename of the saved results\n",
        "    if not args.appl_sampl_filter:\n",
        "        args.label = f\"filter{args.filter}_sampling_{args.appl_sampl_filter}\"\n",
        "    else:\n",
        "        args.label = f\"high_freq_{args.high_freq_better}_top_k_{args.top_k}_top_k_prob_{args.top_k_sampling_prob}_upd_freq_{args.sampling_distr_upd_freq}\"\n",
        "\n",
        "    # Training with time recording\n",
        "\n",
        "    # Start the timer\n",
        "    start_time = time.time()\n",
        "\n",
        "    # Call your training function\n",
        "    main(args)\n",
        "\n",
        "    # End the timer\n",
        "    end_time = time.time()\n",
        "\n",
        "    # Calculate elapsed time\n",
        "    elapsed_time = end_time - start_time\n",
        "\n",
        "    # Convert to minutes and seconds (optional)\n",
        "    minutes, seconds = divmod(elapsed_time, 60)\n",
        "\n",
        "    print(f\"Training completed in {int(minutes)} minutes and {int(seconds)} seconds.\")\n",
        "    print(f\"label:{args.label}\")"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-05T15:33:45.485495Z",
          "iopub.execute_input": "2025-02-05T15:33:45.485864Z",
          "iopub.status.idle": "2025-02-05T15:41:38.906173Z",
          "shell.execute_reply.started": "2025-02-05T15:33:45.48583Z",
          "shell.execute_reply": "2025-02-05T15:41:38.904992Z"
        },
        "id": "765gP7IR_T80",
        "outputId": "0d5405f7-1039-43f0-88e1-a2faa142e400",
        "colab": {
          "referenced_widgets": [
            "9b374be296bb4ede92def3ff82519737"
          ]
        }
      },
      "outputs": [
        {
          "name": "stdout",
          "text": "Number of parameters: 199210\n",
          "output_type": "stream"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "  0%|          | 0/100000 [00:00<?, ?it/s]",
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "9b374be296bb4ede92def3ff82519737"
            }
          },
          "metadata": {}
        },
        {
          "name": "stdout",
          "text": "\nSteps needed to reach 0.9 validation accuracy: None\nTraining completed in 7 minutes and 53 seconds.\nlabel:filterema_sampling_False\n",
          "output_type": "stream"
        }
      ],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "args.label=\"filterema_sampling_False\"\n",
        "\n",
        "\n",
        "results_dir = \"/kaggle/working/results/mnist_online\"\n",
        "filename = f\"mnist_{args.label}.pt\"\n",
        "results_filename = os.path.join(results_dir, filename)\n",
        "\n",
        "filename_plot_acc = f\"mnist_{args.label}_acc.png\"\n",
        "results_filename_plot_acc = os.path.join(results_dir, filename_plot_acc)\n",
        "\n",
        "filename_plot_loss = f\"mnist_{args.label}_loss.png\"\n",
        "results_filename_plot_loss = os.path.join(results_dir, filename_plot_loss)\n",
        "\n",
        "\n",
        "\n",
        "results = torch.load(results_filename, weights_only=True)\n",
        "\n",
        "\n",
        "# Extract data from results\n",
        "its = results[\"its\"]  # Optimization steps\n",
        "train_acc = results[\"train_acc\"]  # Training accuracy\n",
        "val_acc = results[\"val_acc\"]  # Validation accuracy\n",
        "train_loss = results[\"train_loss\"]  # Training loss\n",
        "val_loss = results[\"val_loss\"]  # Validation loss\n",
        "steps_to_reach = results[\"steps_to_reach\"]  # Steps to reach 90% validation accuracy\n",
        "\n",
        "print(f\"Steps needed to reach 0.9 validation accuracy: {steps_to_reach}\")\n",
        "\n",
        "# Plot Accuracy\n",
        "plt.figure()\n",
        "plt.plot(its, train_acc, label=\"train\")\n",
        "plt.plot(its, val_acc, label=\"val\")\n",
        "\n",
        "# Find and annotate the maximum validation accuracy\n",
        "max_val_acc = max(val_acc)\n",
        "max_val_idx = val_acc.index(max_val_acc)\n",
        "plt.annotate(f\"Max Val Acc: {max_val_acc:.4f}\",\n",
        "             (its[max_val_idx], max_val_acc),\n",
        "             textcoords=\"offset points\",\n",
        "             xytext=(0,10),\n",
        "             ha='center',\n",
        "             fontsize=10,\n",
        "             color='red')\n",
        "\n",
        "plt.legend()\n",
        "plt.title(\"Accuracy - Grokfast:yes Sample Filtering:no\")\n",
        "plt.xlabel(\"Optimization Steps\")\n",
        "plt.ylabel(\"Accuracy\")\n",
        "#plt.xscale(\"log\", base=10)\n",
        "plt.grid()\n",
        "plt.savefig(results_filename_plot_acc, dpi=150)\n",
        "\n",
        "print(\"Plots loaded successfully.\")"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-05T16:38:31.063173Z",
          "iopub.execute_input": "2025-02-05T16:38:31.063596Z",
          "iopub.status.idle": "2025-02-05T16:38:31.460691Z",
          "shell.execute_reply.started": "2025-02-05T16:38:31.063565Z",
          "shell.execute_reply": "2025-02-05T16:38:31.459708Z"
        },
        "id": "hHW_0Pcg_T80",
        "outputId": "27191f83-549d-43c7-ba63-cd95d75e32fb"
      },
      "outputs": [
        {
          "name": "stdout",
          "text": "Steps needed to reach 0.9 validation accuracy: None\nPlots loaded successfully.\n",
          "output_type": "stream"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 640x480 with 1 Axes>",
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "if __name__ == \"__main__\":\n",
        "    # Same as used in paper of Grokfast\n",
        "    parser = ArgumentParser(description=\"Train a model on MNIST without custom sampling\")\n",
        "\n",
        "    parser.add_argument(\"--label\", type=str, default=\"\")\n",
        "    parser.add_argument(\"--seed\", type=int, default=0)\n",
        "\n",
        "    parser.add_argument(\"--train_points\", type=int, default=1000)\n",
        "    parser.add_argument(\"--optimization_steps\", type=int, default=100000)\n",
        "    parser.add_argument(\"--batch_size\", type=int, default=200)\n",
        "    parser.add_argument(\"--loss_function\", type=str, default=\"MSE\") #MSE or CrossEntropy\n",
        "    parser.add_argument(\"--optimizer\", type=str, default=\"AdamW\")\n",
        "    parser.add_argument(\"--weight_decay\", type=float, default=2.00)\n",
        "    parser.add_argument(\"--lr\", type=float, default=1e-3)\n",
        "    parser.add_argument(\"--initialization_scale\", type=float, default=8.0)\n",
        "    parser.add_argument(\"--download_directory\", type=str, default=\".\")\n",
        "    parser.add_argument(\"--depth\", type=int, default=3)\n",
        "    parser.add_argument(\"--width\", type=int, default=200)\n",
        "    parser.add_argument(\"--activation\", type=str, default=\"ReLU\")\n",
        "\n",
        "    # Grokfast\n",
        "    parser.add_argument(\"--filter\", type=str, choices=[\"none\", \"ma\", \"ema\", \"fir\"], default=\"ema\")\n",
        "    parser.add_argument(\"--alpha\", type=float, default=0.8)\n",
        "    parser.add_argument(\"--lamb\", type=float, default=0.1)\n",
        "\n",
        "    # Samples ranking\n",
        "    parser.add_argument(\"--ema_alpha_sampl_rank\", type=float, default=0.9)\n",
        "\n",
        "    # Boolean arguements need this due to bad behavior of parser.parse_args\n",
        "    def boolean_string(s):\n",
        "        if s not in {\"False\", \"True\"}:\n",
        "            raise ValueError(\"Not a valid boolean string\")\n",
        "        return s == \"True\"\n",
        "\n",
        "    # These are the hyperparameters related to our online sampling filtering algorithm\n",
        "    parser.add_argument(\"--appl_sampl_filter\", type=boolean_string, default=True)  # If False, perform regular training\n",
        "    parser.add_argument(\"--sampling_distr_upd_freq\", type=int, default=1)  # How often to update the sampling distribution\n",
        "    parser.add_argument(\"--top_k\", type=float, default=0.1)  # Fraction of samples to select more frequently\n",
        "    parser.add_argument(\"--top_k_sampling_prob\", type=float, default=0.9)  # Probability of selecting a sample from the top-k\n",
        "    parser.add_argument(\"--high_freq_better\", type=boolean_string, default=True)  # If True, samples with higher frequency gradient content are considered better for training\n",
        "\n",
        "    # -----------------------------------------------------------------\n",
        "    # Try different hyperparameter values for your grid search here\n",
        "    # -----------------------------------------------------------------\n",
        "    args = parser.parse_args(\n",
        "        [\n",
        "            \"--appl_sampl_filter\", \"True\", # booleans as non strings in order to work\n",
        "            \"--sampling_distr_upd_freq\", \"100\", # the rest as strings for some reason\n",
        "            \"--top_k\", \"0.2\",\n",
        "            \"--top_k_sampling_prob\", \"0.8\",\n",
        "            \"--high_freq_better\", \"True\",\n",
        "        ]\n",
        "    )\n",
        "    # -----------------------------------------------------------------\n",
        "    # -----------------------------------------------------------------\n",
        "\n",
        "    # Create arg.label for the filename of the saved results\n",
        "    if not args.appl_sampl_filter:\n",
        "        args.label = f\"filter{args.filter}_sampling_{args.appl_sampl_filter}\"\n",
        "    else:\n",
        "        args.label = f\"high_freq_{args.high_freq_better}_top_k_{args.top_k}_top_k_prob_{args.top_k_sampling_prob}_upd_freq_{args.sampling_distr_upd_freq}\"\n",
        "\n",
        "    # Training with time recording\n",
        "\n",
        "    # Start the timer\n",
        "    start_time = time.time()\n",
        "\n",
        "    # Call your training function\n",
        "    main(args)\n",
        "\n",
        "    # End the timer\n",
        "    end_time = time.time()\n",
        "\n",
        "    # Calculate elapsed time\n",
        "    elapsed_time = end_time - start_time\n",
        "\n",
        "    # Convert to minutes and seconds (optional)\n",
        "    minutes, seconds = divmod(elapsed_time, 60)\n",
        "\n",
        "    print(f\"Training completed in {int(minutes)} minutes and {int(seconds)} seconds.\")\n",
        "    print(f\"label:{args.label}\")"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-05T15:46:24.276354Z",
          "iopub.execute_input": "2025-02-05T15:46:24.27671Z",
          "iopub.status.idle": "2025-02-05T16:37:30.669396Z",
          "shell.execute_reply.started": "2025-02-05T15:46:24.276682Z",
          "shell.execute_reply": "2025-02-05T16:37:30.668522Z"
        },
        "id": "gQva9sTo_T80",
        "outputId": "6eb8649e-52c8-4592-c339-2a05942251d9",
        "colab": {
          "referenced_widgets": [
            "336b99d209b3454fa3d619dfff95a7ba"
          ]
        }
      },
      "outputs": [
        {
          "name": "stdout",
          "text": "Number of parameters: 199210\n",
          "output_type": "stream"
        },
        {
          "name": "stderr",
          "text": "<ipython-input-53-e6418d240c99>:100: FutureWarning: We've integrated functorch into PyTorch. As the final step of the integration, `functorch.grad` is deprecated as of PyTorch 2.0 and will be deleted in a future version of PyTorch >= 2.3. Please use `torch.func.grad` instead; see the PyTorch 2.0 release notes and/or the `torch.func` migration guide for more details https://pytorch.org/docs/main/func.migrating.html\n  gradient_fn = grad(compute_loss_vmap)\n",
          "output_type": "stream"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "  0%|          | 0/100000 [00:00<?, ?it/s]",
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "336b99d209b3454fa3d619dfff95a7ba"
            }
          },
          "metadata": {}
        },
        {
          "name": "stderr",
          "text": "<ipython-input-53-e6418d240c99>:176: FutureWarning: We've integrated functorch into PyTorch. As the final step of the integration, `functorch.vmap` is deprecated as of PyTorch 2.0 and will be deleted in a future version of PyTorch >= 2.3. Please use `torch.vmap` instead; see the PyTorch 2.0 release notes and/or the `torch.func` migration guide for more details https://pytorch.org/docs/main/func.migrating.html\n  per_sample_grads = vmap(gradient_fn, in_dims=(None, None, None, 0, 0))(\n<ipython-input-53-e6418d240c99>:88: FutureWarning: `torch.nn.utils.stateless.functional_call` is deprecated as of PyTorch 2.0 and will be removed in a future version of PyTorch. Please use `torch.func.functional_call` instead which is a drop-in replacement.\n  logits = functional_call(model, {**params, **buffers}, x.unsqueeze(0))  # Single input\n/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py:608: UserWarning: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([1, 10])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n  return F.mse_loss(input, target, reduction=self.reduction)\n",
          "output_type": "stream"
        },
        {
          "name": "stdout",
          "text": "\nSteps needed to reach 0.9 validation accuracy: None\nTraining completed in 51 minutes and 6 seconds.\nlabel:high_freq_True_top_k_0.2_top_k_prob_0.8_upd_freq_100\n",
          "output_type": "stream"
        }
      ],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "args.label=\"high_freq_True_top_k_0.2_top_k_prob_0.8_upd_freq_100\"\n",
        "\n",
        "\n",
        "results_dir = \"/kaggle/working/results/mnist_online\"\n",
        "filename = f\"mnist_{args.label}.pt\"\n",
        "results_filename = os.path.join(results_dir, filename)\n",
        "\n",
        "filename_plot_acc = f\"mnist_{args.label}_acc.png\"\n",
        "results_filename_plot_acc = os.path.join(results_dir, filename_plot_acc)\n",
        "\n",
        "filename_plot_loss = f\"mnist_{args.label}_loss.png\"\n",
        "results_filename_plot_loss = os.path.join(results_dir, filename_plot_loss)\n",
        "\n",
        "\n",
        "\n",
        "results = torch.load(results_filename, weights_only=True)\n",
        "\n",
        "\n",
        "# Extract data from results\n",
        "its = results[\"its\"]  # Optimization steps\n",
        "train_acc = results[\"train_acc\"]  # Training accuracy\n",
        "val_acc = results[\"val_acc\"]  # Validation accuracy\n",
        "train_loss = results[\"train_loss\"]  # Training loss\n",
        "val_loss = results[\"val_loss\"]  # Validation loss\n",
        "steps_to_reach = results[\"steps_to_reach\"]  # Steps to reach 90% validation accuracy\n",
        "\n",
        "print(f\"Steps needed to reach 0.9 validation accuracy: {steps_to_reach}\")\n",
        "\n",
        "# Plot Accuracy\n",
        "plt.figure()\n",
        "plt.plot(its, train_acc, label=\"train\")\n",
        "plt.plot(its, val_acc, label=\"val\")\n",
        "\n",
        "# Find and annotate the maximum validation accuracy\n",
        "max_val_acc = max(val_acc)\n",
        "max_val_idx = val_acc.index(max_val_acc)\n",
        "plt.annotate(f\"Max Val Acc: {max_val_acc:.4f}\",\n",
        "             (its[max_val_idx], max_val_acc),\n",
        "             textcoords=\"offset points\",\n",
        "             xytext=(0,10),\n",
        "             ha='center',\n",
        "             fontsize=10,\n",
        "             color='red')\n",
        "\n",
        "plt.legend()\n",
        "plt.title(\"Accuracy - Grokfast:yes Sample Filtering:yes\")\n",
        "plt.xlabel(\"Optimization Steps\")\n",
        "plt.ylabel(\"Accuracy\")\n",
        "#plt.xscale(\"log\", base=10)\n",
        "plt.grid()\n",
        "plt.savefig(results_filename_plot_acc, dpi=150)\n",
        "\n",
        "print(\"Plots loaded successfully.\")"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-05T16:38:10.921036Z",
          "iopub.execute_input": "2025-02-05T16:38:10.921449Z",
          "iopub.status.idle": "2025-02-05T16:38:11.328266Z",
          "shell.execute_reply.started": "2025-02-05T16:38:10.921415Z",
          "shell.execute_reply": "2025-02-05T16:38:11.327197Z"
        },
        "id": "kMPirTXt_T80",
        "outputId": "eba5566d-f1b3-4bdd-b246-5a06e6227e95"
      },
      "outputs": [
        {
          "name": "stdout",
          "text": "Steps needed to reach 0.9 validation accuracy: None\nPlots loaded successfully.\n",
          "output_type": "stream"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 640x480 with 1 Axes>",
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "if __name__ == \"__main__\":\n",
        "    # Same as used in paper of Grokfast\n",
        "    parser = ArgumentParser(description=\"Train a model on MNIST without custom sampling\")\n",
        "\n",
        "    parser.add_argument(\"--label\", type=str, default=\"\")\n",
        "    parser.add_argument(\"--seed\", type=int, default=0)\n",
        "\n",
        "    parser.add_argument(\"--train_points\", type=int, default=1000)\n",
        "    parser.add_argument(\"--optimization_steps\", type=int, default=100000)\n",
        "    parser.add_argument(\"--batch_size\", type=int, default=200)\n",
        "    parser.add_argument(\"--loss_function\", type=str, default=\"MSE\") #MSE or CrossEntropy\n",
        "    parser.add_argument(\"--optimizer\", type=str, default=\"AdamW\")\n",
        "    parser.add_argument(\"--weight_decay\", type=float, default=2.00)\n",
        "    parser.add_argument(\"--lr\", type=float, default=1e-3)\n",
        "    parser.add_argument(\"--initialization_scale\", type=float, default=8.0)\n",
        "    parser.add_argument(\"--download_directory\", type=str, default=\".\")\n",
        "    parser.add_argument(\"--depth\", type=int, default=3)\n",
        "    parser.add_argument(\"--width\", type=int, default=200)\n",
        "    parser.add_argument(\"--activation\", type=str, default=\"ReLU\")\n",
        "\n",
        "    # Grokfast\n",
        "    parser.add_argument(\"--filter\", type=str, choices=[\"none\", \"ma\", \"ema\", \"fir\"], default=\"ema\")\n",
        "    parser.add_argument(\"--alpha\", type=float, default=0.8)\n",
        "    parser.add_argument(\"--lamb\", type=float, default=0.1)\n",
        "\n",
        "    # Samples ranking\n",
        "    parser.add_argument(\"--ema_alpha_sampl_rank\", type=float, default=0.9)\n",
        "\n",
        "    # Boolean arguements need this due to bad behavior of parser.parse_args\n",
        "    def boolean_string(s):\n",
        "        if s not in {\"False\", \"True\"}:\n",
        "            raise ValueError(\"Not a valid boolean string\")\n",
        "        return s == \"True\"\n",
        "\n",
        "    # These are the hyperparameters related to our online sampling filtering algorithm\n",
        "    parser.add_argument(\"--appl_sampl_filter\", type=boolean_string, default=True)  # If False, perform regular training\n",
        "    parser.add_argument(\"--sampling_distr_upd_freq\", type=int, default=1)  # How often to update the sampling distribution\n",
        "    parser.add_argument(\"--top_k\", type=float, default=0.1)  # Fraction of samples to select more frequently\n",
        "    parser.add_argument(\"--top_k_sampling_prob\", type=float, default=0.9)  # Probability of selecting a sample from the top-k\n",
        "    parser.add_argument(\"--high_freq_better\", type=boolean_string, default=True)  # If True, samples with higher frequency gradient content are considered better for training\n",
        "\n",
        "    # -----------------------------------------------------------------\n",
        "    # Try different hyperparameter values for your grid search here\n",
        "    # -----------------------------------------------------------------\n",
        "    args = parser.parse_args(\n",
        "        [\n",
        "            \"--appl_sampl_filter\", \"True\", # booleans as non strings in order to work\n",
        "            \"--sampling_distr_upd_freq\", \"100\", # the rest as strings for some reason\n",
        "            \"--top_k\", \"0.2\",\n",
        "            \"--top_k_sampling_prob\", \"0.8\",\n",
        "            \"--high_freq_better\", \"True\",\n",
        "        ]\n",
        "    )\n",
        "    # -----------------------------------------------------------------\n",
        "    # -----------------------------------------------------------------\n",
        "\n",
        "    # Create arg.label for the filename of the saved results\n",
        "    if not args.appl_sampl_filter:\n",
        "        args.label = f\"filter{args.filter}_sampling_{args.appl_sampl_filter}\"\n",
        "    else:\n",
        "        args.label = f\"high_freq_{args.high_freq_better}_top_k_{args.top_k}_top_k_prob_{args.top_k_sampling_prob}_upd_freq_{args.sampling_distr_upd_freq}\"\n",
        "\n",
        "    # Training with time recording\n",
        "\n",
        "    # Start the timer\n",
        "    start_time = time.time()\n",
        "\n",
        "    # Call your training function\n",
        "    main(args)\n",
        "\n",
        "    # End the timer\n",
        "    end_time = time.time()\n",
        "\n",
        "    # Calculate elapsed time\n",
        "    elapsed_time = end_time - start_time\n",
        "\n",
        "    # Convert to minutes and seconds (optional)\n",
        "    minutes, seconds = divmod(elapsed_time, 60)\n",
        "\n",
        "    print(f\"Training completed in {int(minutes)} minutes and {int(seconds)} seconds.\")\n",
        "    print(f\"label:{args.label}\")"
      ],
      "metadata": {
        "trusted": true,
        "id": "xV5k5gm7_T80"
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "args.label=\"filternone_sampling_False\"\n",
        "\n",
        "\n",
        "results_dir = \"/kaggle/working/results/mnist_online\"\n",
        "filename = f\"mnist_{args.label}.pt\"\n",
        "results_filename = os.path.join(results_dir, filename)\n",
        "\n",
        "filename_plot_acc = f\"mnist_{args.label}_acc.png\"\n",
        "results_filename_plot_acc = os.path.join(results_dir, filename_plot_acc)\n",
        "\n",
        "filename_plot_loss = f\"mnist_{args.label}_loss.png\"\n",
        "results_filename_plot_loss = os.path.join(results_dir, filename_plot_loss)\n",
        "\n",
        "\n",
        "\n",
        "results = torch.load(results_filename, weights_only=True)\n",
        "\n",
        "\n",
        "# Extract data from results\n",
        "its = results[\"its\"]  # Optimization steps\n",
        "train_acc = results[\"train_acc\"]  # Training accuracy\n",
        "val_acc = results[\"val_acc\"]  # Validation accuracy\n",
        "train_loss = results[\"train_loss\"]  # Training loss\n",
        "val_loss = results[\"val_loss\"]  # Validation loss\n",
        "steps_to_reach = results[\"steps_to_reach\"]  # Steps to reach 90% validation accuracy\n",
        "\n",
        "print(f\"Steps needed to reach 0.9 validation accuracy: {steps_to_reach}\")\n",
        "\n",
        "# Plot Accuracy\n",
        "plt.figure()\n",
        "plt.plot(its, train_acc, label=\"train\")\n",
        "plt.plot(its, val_acc, label=\"val\")\n",
        "\n",
        "# Find and annotate the maximum validation accuracy\n",
        "max_val_acc = max(val_acc)\n",
        "max_val_idx = val_acc.index(max_val_acc)\n",
        "plt.annotate(f\"Max Val Acc: {max_val_acc:.4f}\",\n",
        "             (its[max_val_idx], max_val_acc),\n",
        "             textcoords=\"offset points\",\n",
        "             xytext=(0,10),\n",
        "             ha='center',\n",
        "             fontsize=10,\n",
        "             color='red')\n",
        "\n",
        "plt.legend()\n",
        "plt.title(\"Accuracy - Grokfast:yes Filtering:no\")\n",
        "plt.xlabel(\"Optimization Steps\")\n",
        "plt.ylabel(\"Accuracy\")\n",
        "plt.xscale(\"log\", base=10)\n",
        "plt.grid()\n",
        "plt.savefig(results_filename_plot_acc, dpi=150)\n",
        "\n",
        "print(\"Plots loaded successfully.\")"
      ],
      "metadata": {
        "trusted": true,
        "id": "KXs9on-b_T81"
      },
      "outputs": [],
      "execution_count": null
    }
  ]
}